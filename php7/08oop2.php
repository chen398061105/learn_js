<?php

/**
 * oop 面向对象[面向功能] 面向函数[函数调用] 面向对象[架构安全]
 * 抽象类 接口
 * 开发原则:
 * 1 单一职责,功能单一,不能太多
 * 2 开放封闭原则 :保存原来功能又能增加新功能
 * 3 替换原则 :尽量把父类设计为抽象类或则接口,这样子类可以更好扩展
 * 4 依赖倒置原则 具体依赖抽象,上层依赖下层,-->面向接口编程
 * 5 接口分离原则 模块间要要那通过抽象接口隔离开,而不是通过类强耦合
 *
 */
//抽象类,可以没有抽象方法,
abstract class Usb
{
//    常量
//    变量
//    abstract function abc()抽象方法
//    function abc()普通方法
    abstract function tongxin();//修饰符 一般是public或者protected
    abstract function tongdian();
}

class Shouji extends Usb{
    function tongdian()
    {
        // TODO: Implement tongdian() method.
    }
    function tongxin(){

    }
}

interface Test_jk{
    function abc();
}
//实现接口方法必须实现,方法可以重写
class A extends Shouji implements Test_jk{

    public function tongdian()
    {
        parent::tongdian(); // TODO: Change the autogenerated stub
    }
    public function tongxin()
    {
        parent::tongxin(); // TODO: Change the autogenerated stub
    }
    public function abc()
    {
        // TODO: Implement abc() method.
        echo "接口abc";
    }
}
$obj = new A();
$obj->abc();

//流程: 接口/抽象类 interface abstract -->类功能实现 class -->对象调用 new